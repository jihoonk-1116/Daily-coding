// class Solution {
//     public int findKthLargest(int[] nums, int k) {
//         //max heap
//         //for to put all nums element to pq
//         //find k th largest -> need to ignore duplicated value 
//         PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b-a);
//         for(int n : nums) maxHeap.offer(n);
//         for(int i=0;i<k-1;i++) maxHeap.poll();
        
//         return maxHeap.poll();
//     }
// }

class Solution {
    
    public int findKthLargest(int[] nums, int k) {
        int len = nums.length;
        quickSelect(nums, k, 0, len-1);
        return nums[k-1];
    }
    
    public void quickSelect(int[] nums, int K, int lo, int hi) {
        
        if (lo >= hi) return;
        
        int pivotInd = lo + (hi-lo) / 2;
        int pivot = nums[pivotInd];
        swap(nums, pivotInd, hi);
     
        int s = lo;
        for (int i = lo; i < hi; i++) {
            if (nums[i] > pivot) {
                swap(nums, i, s);
                s++;
            }
        }
        swap(nums, hi, s);
        
        if (s == K-1) return;
        else if (s < K-1) quickSelect(nums, K, s + 1, hi); //search right side of the pivot 
        else quickSelect(nums, K, lo, s - 1); //search left side of the pivot 
    }
    
    private void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}
